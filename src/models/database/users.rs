//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.6

use super::sea_orm_active_enums::Gender;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "Users")]
pub struct Model {
    #[sea_orm(column_name = "UserID", primary_key)]
    pub user_id: i32,
    #[sea_orm(column_name = "Username")]
    pub username: String,
    #[sea_orm(column_name = "PasswordHash")]
    pub password_hash: String,
    #[sea_orm(column_name = "Gender")]
    pub gender: Option<Gender>,
    #[sea_orm(column_name = "Email")]
    pub email: Option<String>,
    #[sea_orm(column_name = "IsActive")]
    pub is_active: i8,
    #[sea_orm(column_name = "CreatedAt")]
    pub created_at: DateTime,
    #[sea_orm(column_name = "LastLogin")]
    pub last_login: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::user_roles::Entity")]
    UserRoles,
}

impl Related<super::user_roles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::UserRoles.def()
    }
}

impl Related<super::roles::Entity> for Entity {
    fn to() -> RelationDef {
        super::user_roles::Relation::Roles.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::user_roles::Relation::Users.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
