//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.12

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "sys_role_permission")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub role_code: String,
    pub permission_code: String,
    pub create_user: String,
    pub create_time: Option<DateTimeUtc>,
    pub update_user: Option<String>,
    pub update_time: Option<DateTimeUtc>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::sys_permission::Entity",
        from = "Column::PermissionCode",
        to = "super::sys_permission::Column::PermissionCode",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    SysPermission,
    #[sea_orm(
        belongs_to = "super::sys_role::Entity",
        from = "Column::RoleCode",
        to = "super::sys_role::Column::RoleCode",
        on_update = "Restrict",
        on_delete = "Cascade"
    )]
    SysRole,
}

impl Related<super::sys_permission::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SysPermission.def()
    }
}

impl Related<super::sys_role::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SysRole.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
